apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.resourceName }}
  namespace: {{ .Release.Namespace }}
  {{- if .Values.deploymentAnnotations }}
  annotations:
    {{- range $key, $val := .Values.deploymentAnnotations }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.resourceName }}
  template:
    metadata:
      labels:
        app: {{ .Values.resourceName }}
      annotations:
        {{- /*
        protected pod annotations:
          checksum: Required for proper pod creation, see below
        Additional can be added with:
          {{- $_ := set $protectedAnnotations "my.custom/annotation"  .Values.myCustomAnnotation }}
        */}}
        {{- $protectedAnnotations := dict   "checksum"              (print "chart-version=" .Chart.Version "_config-hash=" (.Values | toString | sha256sum) ) }}
        {{- /*
        Final pod annotations are the result of proteced merged with overrides, where protected takes precedence */}}
        {{- $podAnnotations := .Values.podAnnotations }} {{- /* <-- Required to define as variable to support 'podAnnotations: null' */}}
        {{- $merged := mustMergeOverwrite $podAnnotations $protectedAnnotations }}
        {{- range $key, $val := $merged }}
        {{- if $key | eq "checksum" }}
        # checksum anntotation:
        #   We change this annotation on change in chart or parameters, to force re-create of pods (to pick up config changes etc)
        #   We create a string based on the chart version, and the resolved configuration values.
        #   See https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments{{- end }}
        {{ $key }}: {{ $val | quote }}
        {{- end }}
    spec:
      nodeSelector:
        NodePool: workers
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - {{ .Values.resourceName }}
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Values.resourceName }}
          image: "{{ .Values.image }}:{{ .Values.tag }}"
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.port }}
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.port }}
            initialDelaySeconds: 2
          resources:
            requests:
              memory: {{ .Values.memory_request }}
              cpu: {{ .Values.cpu_request }}
            limits:
              memory: {{ .Values.memory_limit }}
              cpu: {{ .Values.cpu_limit }}
          envFrom:
          {{- range .Values.secretRefs }}
            - secretRef:
                name: {{ . | quote }}
          {{- end }}
          # We place config AFTER secrets, to more easily override with dummy values during development:
          {{- range .Values.configMapRefs }}
            - configMapRef:
                name: {{ . | quote }}
          {{- end }}
          {{- if .Values.config  }}
            - configMapRef:
                name: {{ .Values.resourceName }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.port }}
              name: web
          securityContext:
            capabilities:
              drop: [ALL]
            privileged: false
            allowPrivilegeEscalation: false
            # Enabling this requires some testing, as nginx writes to /etc/nginx, /var/cache, /tmp etc.
            readOnlyRootFilesystem: false
            # 101 maps to nginx user and nginx group in the nginx image
            runAsUser: 101
            runAsGroup: 101
          {{- if .Values.templateConfigOverrides }}
          volumeMounts:
          {{- range $key, $_ := .Values.templateConfigOverrides }}
            - name: templateoverrides
              mountPath: /etc/nginx/templates/{{ $key }}
              subPath: {{ $key }}
          {{- end }}
          {{- end }}
      {{- if .Values.templateConfigOverrides }}
      volumes:
      - name: templateoverrides
        configMap:
          name: {{ .Values.resourceName }}-template-overrides
          items:
          {{- range $key, $_ := .Values.templateConfigOverrides }}
          - key: {{ $key }}
            path: {{ $key }}
          {{- end }}
      {{- end }}
